<?php

use Drupal\Core\Form\FormStateInterface;
/**
 * Implements hook_page_top().
 */
function firstmodule_page_top() {

  // Showing the message at the top of the page
  \Drupal::messenger()->addStatus('Hello world!');
}

/**
 * Implements hook_entity_field_access()
 * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
 * @param \Drupal\Core\Session\AccountInterface $account
 * @return \Drupal\Core\Access\AccessResult|\Drupal\Core\Access\AccessResultAllowed|\Drupal\Core\Access\AccessResultNeutral
 */
function firstmodule_entity_field_access($operation, \Drupal\Core\Field\FieldDefinitionInterface $field_definition, \Drupal\Core\Session\AccountInterface $account) {

  $field_name = $field_definition->getName();
  if ($field_name === 'promote' || $field_name === 'sticky' ) {
    $can_promote_content_nodes = $account->hasPermission('can promote nodes');
    return Drupal\Core\Access\AccessResult::allowedIf($can_promote_content_nodes);
  }
  return \Drupal\Core\Access\AccessResult::neutral();
}

/**
 * Implements hook_entity_type_insert()
 * @param \Drupal\node\NodeInterface $node
 * @return void
 * Sending Email to admin whenever the node is inserted
 */
function firstmodule_node_insert(\Drupal\node\NodeInterface $node) {

  if ($node->isPublished()) {
    $site_mail = \Drupal::config('system.site')->get('mail');
    /** @var \Drupal\Core\Mail\MailManager $mail_service */
    // Sending the email using Plugin Manager Mail Service
    $mail_service = \Drupal::service('plugin.manager.mail');
    $mail_service->mail(
      module: 'mymodule',
      key: 'node_published_insert',
      to: $site_mail,
      langcode: 'en',
      params: ['node' => $node],
    );
  }
}

/**
 * Implements hook_entity_type_update
 * @param \Drupal\node\NodeInterface $node
 * @return void
 * Checking & sending the email if the node is initially not in published state
 */
function firstmodule_node_update(\Drupal\node\NodeInterface $node) {

  if ($node->isPublished()) {
    /** @var \Drupal\node\NodeInterface $original */
    $original = $node->original;
    // Checking the initial state of node
    if (!$original->isPublished()) {
      $site_mail = \Drupal::config('system.site')->get('mail');
      /** @var \Drupal\Core\Mail\MailManager $mail_service */
      $mail_service = \Drupal::service('plugin.manager.mail');
      $mail_service->mail(
        module: 'mymodule',
        key: 'node_published_update',
        to: $site_mail,
        langcode: 'en',
        params: ['node' => $node],
      );
    }
  }
}

/**
 * Implements hook_mail()
 * @param $key
 * @param $message
 * @param $params
 * @return void
 * Sending an email based upon the state of the node
 */
function firstmodule_mail($key, &$message, $params) {

  $node = $params['node'];
  if ($key === 'node_published_insert') {
    $message['subject'] = 'Newly Published Node entity: '. $node->label();
  }
  elseif ($key === 'node_published_update') {
    $message['subject'] = 'Existing Node Published entity: '. $node->label();
  }
  else {
    return;
  }
  $message['body'][] = 'The following node has been published:';
  $message['body'][] = $node->label();
  $message['body'][] = $node->toUrl()->setAbsolute()->toString();
}

/**
 * Implements hook_form_FORM_ID_alter()
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 * @return void
 */
function firstmodule_form_system_site_information_settings_alter(array &$form, FormStateInterface $form_state, $form_id) {

  // Modifying the existing 'system_site_information_settings' form to include site_phone field
  $form['site_information']['site_phone'] = [
    '#type' => 'tel',
    '#title' => t("Site Phone"),
    '#default_value' => \Drupal::config('system.site')->get('phone'),
  ];

  //calling the below method for getting the Submit value
  $form['#submit'][] = 'firstmodule_system_site_information_phone_submit';
}

function firstmodule_system_site_information_phone_submit(array &$form, FormStateInterface $form_state) {
  $config = \Drupal::configFactory()->getEditable('system.site');
  $config->set('phone', $form_state->getValue('site_phone'));
}

/**
 * Implements hook_block_alter()
 * @param $definitions
 * @return void
 */
function firstmodule_block_alter(&$definitions) {

  // Altering the label of the user_logic_block
  $definitions['user_login_block']['admin_label'] = t('Login');
}
